                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=19488.04..19488.05 rows=1 width=68) (actual time=104.489..108.914 rows=1 loops=1)
   Output: min((mc.note)::text), min((t.title)::text), min(t.production_year)
   ->  Gather  (cost=19487.82..19488.03 rows=2 width=68) (actual time=102.722..108.908 rows=3 loops=1)
         Output: (PARTIAL min((mc.note)::text)), (PARTIAL min((t.title)::text)), (PARTIAL min(t.production_year))
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=18487.82..18487.83 rows=1 width=68) (actual time=95.625..95.628 rows=1 loops=3)
               Output: PARTIAL min((mc.note)::text), PARTIAL min((t.title)::text), PARTIAL min(t.production_year)
               Worker 0:  actual time=95.082..95.085 rows=1 loops=1
               Worker 1:  actual time=89.946..89.950 rows=1 loops=1
               ->  Nested Loop  (cost=3.45..18487.81 rows=1 width=45) (actual time=93.620..95.609 rows=47 loops=3)
                     Output: mc.note, t.title, t.production_year
                     Inner Unique: true
                     Join Filter: (mc.movie_id = t.id)
                     Worker 0:  actual time=91.221..95.052 rows=95 loops=1
                     Worker 1:  actual time=89.942..89.945 rows=0 loops=1
                     ->  Nested Loop  (cost=3.02..18487.22 rows=1 width=32) (actual time=93.601..95.338 rows=47 loops=3)
                           Output: mc.note, mc.movie_id, mi_idx.movie_id
                           Inner Unique: true
                           Worker 0:  actual time=91.197..94.686 rows=95 loops=1
                           Worker 1:  actual time=89.941..89.944 rows=0 loops=1
                           ->  Nested Loop  (cost=2.86..18481.86 rows=194 width=36) (actual time=93.592..95.306 rows=49 loops=3)
                                 Output: mi_idx.movie_id, mc.note, mc.company_type_id, mc.movie_id
                                 Worker 0:  actual time=91.184..94.632 rows=95 loops=1
                                 Worker 1:  actual time=89.941..89.943 rows=0 loops=1
                                 ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=4) (actual time=93.556..93.585 rows=83 loops=3)
                                       Output: mi_idx.movie_id
                                       Inner Unique: true
                                       Hash Cond: (mi_idx.info_type_id = it.id)
                                       Worker 0:  actual time=91.120..91.173 rows=162 loops=1
                                       Worker 1:  actual time=89.940..89.942 rows=0 loops=1
                                       ->  Parallel Seq Scan on public.movie_info_idx mi_idx  (cost=0.00..13685.15 rows=575015 width=8) (actual time=0.007..34.939 rows=460012 loops=3)
                                             Output: mi_idx.id, mi_idx.movie_id, mi_idx.info_type_id, mi_idx.info, mi_idx.note
                                             Worker 0:  actual time=0.008..33.506 rows=465074 loops=1
                                             Worker 1:  actual time=0.011..33.933 rows=478127 loops=1
                                       ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.056..0.057 rows=1 loops=3)
                                             Output: it.id
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             Worker 0:  actual time=0.033..0.034 rows=1 loops=1
                                             Worker 1:  actual time=0.116..0.116 rows=1 loops=1
                                             ->  Seq Scan on public.info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.050..0.051 rows=1 loops=3)
                                                   Output: it.id
                                                   Filter: ((it.info)::text = 'top 250 rank'::text)
                                                   Rows Removed by Filter: 112
                                                   Worker 0:  actual time=0.029..0.030 rows=1 loops=1
                                                   Worker 1:  actual time=0.106..0.107 rows=1 loops=1
                                 ->  Index Scan using movie_id_movie_companies on public.movie_companies mc  (cost=0.43..0.62 rows=1 width=32) (actual time=0.020..0.020 rows=1 loops=250)
                                       Output: mc.id, mc.movie_id, mc.company_id, mc.company_type_id, mc.note
                                       Index Cond: (mc.movie_id = mi_idx.movie_id)
                                       Filter: (((mc.note)::text !~~ '%(as Metro-Goldwyn-Mayer Pictures)%'::text) AND (((mc.note)::text ~~ '%(co-production)%'::text) OR ((mc.note)::text ~~ '%(presents)%'::text)))
                                       Rows Removed by Filter: 33
                                       Worker 0:  actual time=0.021..0.021 rows=1 loops=162
                           ->  Memoize  (cost=0.16..0.18 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=147)
                                 Output: ct.id
                                 Cache Key: mc.company_type_id
                                 Cache Mode: logical
                                 Hits: 50  Misses: 2  Evictions: 0  Overflows: 0  Memory Usage: 1kB
                                 Worker 0:  actual time=0.000..0.000 rows=1 loops=95
                                   Hits: 94  Misses: 1  Evictions: 0  Overflows: 0  Memory Usage: 1kB
                                 ->  Index Scan using company_type_pkey on public.company_type ct  (cost=0.15..0.17 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=3)
                                       Output: ct.id
                                       Index Cond: (ct.id = mc.company_type_id)
                                       Filter: ((ct.kind)::text = 'production companies'::text)
                                       Rows Removed by Filter: 0
                                       Worker 0:  actual time=0.007..0.007 rows=1 loops=1
                     ->  Index Scan using title_pkey on public.title t  (cost=0.43..0.58 rows=1 width=25) (actual time=0.005..0.005 rows=1 loops=142)
                           Output: t.id, t.title, t.imdb_index, t.kind_id, t.production_year, t.imdb_id, t.phonetic_code, t.episode_of_id, t.season_nr, t.episode_nr, t.series_years, t.md5sum
                           Index Cond: (t.id = mi_idx.movie_id)
                           Worker 0:  actual time=0.003..0.003 rows=1 loops=95
 Planning Time: 4.497 ms
 Execution Time: 109.066 ms
(71 rows)

